name: CI

on:
  push:
    branches:
      - dev
  pull_request:
  release:
    types: [published]

env:
  ALL_PYTHON_VERSIONS: "['3.12', '3.13']"
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  UV_LINK_MODE: "copy"

jobs:
  linux:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - runner: ubuntu-24.04
            target: x86_64
          - runner: ubuntu-24.04-arm
            target: aarch64
          - runner: ubuntu-24.04
            target: armv7
        python-version: ["3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: "true"
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: dist
      - name: 🏗 Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      - name: 🏗  Restore base Python virtual environment
        id: cache-venv
        uses: actions/cache@v4.2.0
        with:
          path: .venv
          key: |
            ${{ runner.os }}-${{ matrix.platform.target }}-${{hashFiles('uv.lock', 'pyproject.toml', 'Cargo.lock', 'Cargo.toml') }}
            -$(date -u '+%Y-%m-%dT%H:%M:%s')
          restore-keys: ${{ runner.os }}-${{ matrix.platform.target }}-${{hashFiles('uv.lock', 'pyproject.toml', 'Cargo.lock', 'Cargo.toml') }}
      - name: Setup test env
        if: (matrix.platform.target == 'x86_64' || matrix.platform.target == 'aarch64') && steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          uv venv -p ${{ matrix.python-version }}
          uv export --group test --no-emit-project > test-requirements.txt
          uv pip install -r test-requirements.txt
      - name: pytest
        if: ${{ matrix.platform.target == 'x86_64' || matrix.platform.target == 'aarch64' }}
        shell: bash
        run: |
          set -e
          rm -rf deebot_client
          source .venv/bin/activate
          uv pip install --force-reinstall dist/deebot_client-*.whl
          pytest
      - name: pytest
        if: ${{ matrix.platform.target != 'x86_64' && matrix.platform.target != 'aarch64' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.platform.target }}
          distro: ubuntu22.04
          githubToken: ${{ github.token }}
          install: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            uv venv -p ${{ matrix.python-version }}
            uv export --group test --no-emit-project > test-requirements.txt
            uv pip install -r test-requirements.txt
          run: |
            set -e
            rm -rf deebot_client
            uv pip install --force-reinstall dist/deebot_client-*.whl
            pytest

  # musllinux:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: ubuntu-22.04
  #           target: x86_64
  #         - runner: ubuntu-22.04
  #           target: x86
  #         - runner: ubuntu-22.04
  #           target: aarch64
  #         - runner: ubuntu-22.04
  #           target: armv7
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: "true"
  #         manylinux: musllinux_1_2
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-musllinux-${{ matrix.platform.target }}
  #         path: dist
  #     - name: pytest
  #       if: ${{ startsWith(matrix.platform.target, 'x86_64') }}
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: alpine:latest
  #         options: -v ${{ github.workspace }}:/io -w /io
  #         run: |
  #           set -e
  #           apk add py3-pip py3-virtualenv
  #           rm -rf deebot_client
  #           python3 -m virtualenv .venv
  #           source .venv/bin/activate
  #           pip install deebot-client --no-index --find-links dist --force-reinstall
  #           pip install pytest
  #           pytest
  #     - name: pytest
  #       if: ${{ !startsWith(matrix.platform.target, 'x86') }}
  #       uses: uraimo/run-on-arch-action@v2
  #       with:
  #         arch: ${{ matrix.platform.target }}
  #         distro: alpine_latest
  #         githubToken: ${{ github.token }}
  #         install: |
  #           apk add py3-virtualenv
  #         run: |
  #           set -e
  #           rm -rf deebot_client
  #           python3 -m virtualenv .venv
  #           source .venv/bin/activate
  #           pip install pytest
  #           pip install deebot-client --find-links dist --force-reinstall
  #           pytest

  # windows:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: windows-latest
  #           target: x64
  #         - runner: windows-latest
  #           target: x86
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #         architecture: ${{ matrix.platform.target }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: "true"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.platform.target }}
  #         path: dist
  #     - name: pytest
  #       if: ${{ !startsWith(matrix.platform.target, 'aarch64') }}
  #       shell: bash
  #       run: |
  #         set -e
  #         rm -rf deebot_client
  #         python3 -m venv .venv
  #         source .venv/Scripts/activate
  #         pip install deebot-client --find-links dist --force-reinstall
  #         pip install pytest
  #         pytest

  # macos:
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: macos-13
  #           target: x86_64
  #         - runner: macos-14
  #           target: aarch64
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --find-interpreter
  #         sccache: "true"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-macos-${{ matrix.platform.target }}
  #         path: dist
  #     - name: pytest
  #       run: |
  #         set -e
  #         rm -rf deebot_client
  #         python3 -m venv .venv
  #         source .venv/bin/activate
  #         pip install deebot-client --find-links dist --force-reinstall
  #         pip install pytest
  #         pytest

  # sdist:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build sdist
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         command: sdist
  #         args: --out dist
  #     - name: Upload sdist
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-sdist
  #         path: dist
