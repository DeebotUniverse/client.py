[build-system]
requires = ["setuptools>=60",
    "setuptools-scm>=8.0"]
build-backend = "setuptools.build_meta"

[project]
name        = "deebot-client"
license     = {text = "GPL-3.0"}
description = "Deebot client library in python 3"
readme      = "README.md"
authors     = [
    {name = "Robert Resch", email = "robert@resch.dev"}
]
keywords    = ["home", "automation", "homeassistant", "vacuum", "robot", "deebot", "ecovacs"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3.11",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11.0"
dynamic = ["dependencies", "version"]

[project.urls]
"Homepage"    = "https://deebot.readthedocs.io/"
"Source Code" = "https://github.com/DeebotUniverse/client.py"
"Bug Reports" = "https://github.com/DeebotUniverse/client.py/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

[tool.setuptools.packages.find]
include = ["deebot_client*"]

[tool.setuptools_scm]
[tool.black]
target-version = ['py311']
safe = true

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false


[tool.ruff.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = [
    "deebot_client",
]



[tool.ruff]
select = [
    "ALL",
]

ignore = [
    "ANN101", # Self... explanatory
    "ANN102", # Cls... explanatory
    "ANN401", # Opinioated warning on disallowing dynamically typed expressions
    "D203", # Conflicts with other rules
    "D213", # Conflicts with other rules
    "EM101", # raw-string-in-exception

    "D105",  # Missing docstring in magic method
    "D107",  # Missing docstring in `__init__`
    "E501",  # line too long

    "PLR2004",  # Magic value used in comparison, consider replacing {value} with a constant variable


    # Conflicts with the Ruff formatter
    "COM812",
    "ISC001",

    # Remove later
    "TD", # Todos
    "A", # bultins
    "DTZ", # use tz need to test it first
    "TRY", # tryceratops
    "FIX002", # Line contains TODO, consider resolving the issue
    "BLE001", # Do not catch blind exception: `Exception`

]


[tool.ruff.per-file-ignores]
"tests/**" = [
    "D100",  # Missing docstring in public module
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "N802",  # Function name {name} should be lowercase
    "N816",  # Variable {name} in global scope should not be mixedCase
    "S101",  # Use of assert detected
    "SLF001", # Private member accessed: {access}
    "T201",  # print found
]

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pylint]
max-args = 7


[tool.pylint.MAIN]
py-version = "3.11"
ignore = [
    "tests",
]
fail-on = [
    "I",
]

[tool.pylint.BASIC]
good-names= ["i","j","k","ex","_","T","x","y","id","tg"]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# abstract-class-little-used - prevents from setting right foundation
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
# ---
# Pylint CodeStyle plugin
# consider-using-namedtuple-or-dataclass - too opinionated
# consider-using-assignment-expr - decision to use := better left to devs
disable = [
    "format",
    "cyclic-import",
    "duplicate-code",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-locals",
    "too-many-ancestors",
    "too-few-public-methods",
]
enable = [
    "useless-suppression",
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false


[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
]