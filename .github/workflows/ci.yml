name: CI

on:
  push:
    branches:
      - dev
  pull_request:

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  code-quality:
    runs-on: "ubuntu-latest"
    name: Check code quality
    steps:
      - name: ‚§µÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üèó Install uv and Python
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          cache-local-path: ${{ env.UV_CACHE_DIR }}

      - name: üèó Install the project
        run: uv sync --locked --dev

      # Following steps cannot run by pre-commit.ci as repo = local
      - name: Run mypy
        run: uv run --frozen mypy deebot_client/

      - name: Pylint review
        run: uv run --frozen pylint deebot_client/**/*.py

      - name: Verify no getLogger usages
        run: scripts/check_getLogger.sh

  wheels:
    name: Py${{ matrix.python-version }} on ${{ matrix.platform }} with ${{ matrix.linux }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.12"
          - "3.13"
        platform:
          - "x86_64"
          - "x86"
          - "aarch64"
          - "armv7"
        linux:
          - compatibility: "manylinux_2_34"
            script: sudo apt update && sudo apt install -y pkg-config liblzma-dev
          - compatibility: "musllinux_1_2"
            script: apk add --no-cache pkgconfig xz-dev
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: üèó Set up uv and Python ${{ matrix.python-version }}
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          python-version: ${{ matrix.python-version }}
      - name: üèó Set package version
        if: ${{ github.event_name == 'release' }}
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ github.event.release.tag_name }}\"/" pyproject.toml
      - name: üèó Prepare for build
        run: |
          uv pip install pip
      - name: üì¶ Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform }}
          args: --release --out dist --find-interpreter
          # sccache: "true"
          manylinux: ${{ matrix.linux.compatibility }}
          before-script-linux: ${{ matrix.linux.script }}
      - name: ‚¨ÜÔ∏è Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.python-version }}-${{ matrix.linux.compatibility }}-${{ matrix.platform.target }}
          path: dist
      - name: pytest
        if: ${{ startsWith(matrix.linux.compatibility, 'manylinux') && matrix.platform == 'x86_64' }}
        shell: bash
        run: |
          set -e
          uv sync --dev --locked --no-install-workspace
          uv pip install deebot-client --find-links dist --force-reinstall
          pytest
      - name: pytest
        if: ${{ startsWith(matrix.linux.compatibility, 'manylinux') &&  matrix.platform != 'x86_64' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.platform }}
          distro: ubuntu_latest
          githubToken: ${{ github.token }}
          install: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            uv sync --dev --locked --no-install-workspace
          run: |
            set -e
            uv pip install deebot-client --find-links dist --force-reinstall
            pytest
      - name: pytest
        if: ${{ startsWith(matrix.linux.compatibility, 'musllinux') && matrix.platform == 'x86_64' }}
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            set -e
            curl -LsSf https://astral.sh/uv/install.sh | sh
            uv sync --dev --locked --no-install-workspace
            uv pip install deebot-client --no-index --find-links dist --force-reinstall
            pytest
      - name: pytest
        if: ${{ startsWith(matrix.linux.compatibility, 'musllinux') && matrix.platform != 'x86_64' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.platform.target }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            curl -LsSf https://astral.sh/uv/install.sh | sh
            uv sync --dev --locked --no-install-workspace
          run: |
            set -e
            uv pip install deebot-client --no-index --find-links dist --force-reinstall
            pytest

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  sdist:
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
