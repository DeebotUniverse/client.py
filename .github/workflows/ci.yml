name: CI

on:
  push:
    branches:
      - dev
  pull_request:
  release:
    types: [published]

env:
  ADDITIONAL_PYTHON_VERSIONS: "['3.12']"

jobs:
  info:
    name: Collect information & prepare
    outputs:
      default_python_version: ${{ steps.info.outputs.default_python_version }}
      python_versions: ${{ steps.info.outputs.python_versions }}
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è  Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: Collect information
        id: info
        run: |
          default_python_version=$(cat .python-version)
          echo "default python version: ${default_python_version}"
          echo "default_python_version=${default_python_version}" >> $GITHUB_OUTPUT

          # Check if ADDITIONAL_PYTHON_VERSIONS contains default_python_version. If not add it
          if [[ ! ${ADDITIONAL_PYTHON_VERSIONS} == *"${default_python_version}"* ]]; then
            ADDITIONAL_PYTHON_VERSIONS="[${ADDITIONAL_PYTHON_VERSIONS:1:-1}, '${default_python_version}']"
          fi
          echo "python_versions: ${ADDITIONAL_PYTHON_VERSIONS}"
          echo "python_versions=${ADDITIONAL_PYTHON_VERSIONS}" >> $GITHUB_OUTPUT
      - name: üèó Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      - name: Generate requirements.txt
        run: |
          uv export --no-hashes --no-dev --group test --no-emit-project > requirements.txt
      - name: Upload requirements.txt
        uses: actions/upload-artifact@v4
        with:
          name: requirements.txt
          path: requirements.txt

  build-test-native:
    name: ${{ matrix.platform.name }} ${{ matrix.platform.target }} ${{ matrix.python-version }}
    runs-on: ${{ matrix.platform.runner }}
    needs: info
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            manylinux: manylinux_2_34
            pytest_args: ""
          - name: Macos
            pytest_args: -m "not docker"
        platform:
          - name: Linux
            runner: ubuntu-latest
            target: x86_64
          - name: Linux
            runner: ubuntu-24.04-arm
            target: aarch64
          - name: Windows
            runner: windows-latest
            target: x64
            activate_venv: .venv/Scripts/activate
            pytest_args: -m "not docker"
          - name: Macos
            runner: macos-13
            target: x86_64
          - name: Macos
            runner: macos-14
            target: aarch64
        python-version: ${{ fromJSON(needs.info.outputs.python_versions) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ (matrix.platform.name == 'Windows') && matrix.platform.target || '' }}
      - name: üèó Set package version
        if: ${{ github.event_name == 'release' }}
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ github.event.release.tag_name }}\"/" pyproject.toml
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --strip --out dist -i python${{ matrix.python-version }}
          sccache: "true"
          manylinux: ${{ matrix.manylinux }}
          before-script-linux: python3 -m ensurepip
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.name }}-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: dist
      - name: üèó Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements.txt
      - name: Prepare env and install wheel
        shell: bash
        run: |
          rm -rf deebot_client
          uv venv -p ${{ matrix.python-version }}
          uv pip install -r requirements.txt
          uv pip install --force-reinstall dist/deebot_client-*.whl
      - name: Run pytest
        id: pytest
        run: |
          ${{ matrix.platform.activate_venv || 'source .venv/bin/activate' }}
          pytest tests --cov=./ --cov-report=xml --junitxml=junit.xml -o junit_family=legacy -v ${{ matrix.pytest_args }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
      - name: Upload test results to Codecov
        if: ${{ !cancelled() && steps.pytest.outcome == 'success' }}
        uses: codecov/test-results-action@v1
        with:
          # fail_ci_if_error: true
          verbose: true

  # linux:
  #   name: Linux ${{ matrix.platform.name }} ${{ matrix.python-version }}
  #   runs-on: ${{ matrix.platform.runner }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       platform:
  #         - name: amd64
  #           runner: ubuntu-24.04
  #           target: x86_64
  #           native: true
  #         - name: aarch64
  #           runner: ubuntu-24.04-arm
  #           target: aarch64
  #           native: true
  #         # - name: armv7
  #         #   runner: ubuntu-24.04
  #         #   target: armv7
  #         #   native: false
  #       python-version: ["3.12", "3.13"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --strip --out dist -i python${{ matrix.python-version }}
  #         sccache: "false"
  #         manylinux: manylinux_2_34
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-linux-${{ matrix.platform.name }}-${{ matrix.python-version }}
  #         path: dist
  #     - name: üèó Install uv
  #       if: ${{ matrix.platform.native }}
  #       uses: astral-sh/setup-uv@v5
  #       with:
  #         enable-cache: true
  #     - name: pytest (native)
  #       if: ${{ matrix.platform.native }}
  #       shell: bash
  #       run: |
  #         rm -rf deebot_client
  #         uv venv -p ${{ matrix.python-version }}
  #         uv export --no-dev --group test --no-emit-project > test-requirements.txt
  #         uv pip install -r test-requirements.txt
  #         source .venv/bin/activate
  #         uv pip install --force-reinstall dist/deebot_client-*.whl
  #         pytest
  #     - name: pytest (different arch)
  #       if: ${{ ! matrix.platform.native }}
  #       uses: uraimo/run-on-arch-action@v2
  #       with:
  #         arch: ${{ matrix.platform.target }}
  #         distro: ubuntu_latest
  #         install: |
  #           set -euxo pipefail
  #           apt-get update
  #           apt-get install -y --no-install-recommends curl python${{ matrix.python-version }}
  #           update-ca-certificates
  #           curl -LsSf https://astral.sh/uv/install.sh | sh
  #           source $HOME/.local/bin/env
  #           uv venv -p ${{ matrix.python-version }}
  #           uv export --no-dev --group test --no-emit-project -p ${{ matrix.python-version }} > test-requirements.txt
  #           uv pip install -r test-requirements.txt
  #         run: |
  #           set -euxo pipefail
  #           source $HOME/.local/bin/env
  #           rm -rf deebot_client
  #           uv pip install --force-reinstall dist/deebot_client-*.whl
  #           pytest

  build-test-qemu:
    name: Musllinux ${{ matrix.platform.name }} ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: info
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: amd64
            target: x86_64
          # - name: aarch64
          #   target: aarch64
          # - name: armv7
          #   target: armv7
        python-version: ${{ fromJSON(needs.info.outputs.python_versions) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: üèó Set package version
        if: ${{ github.event_name == 'release' }}
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ github.event.release.tag_name }}\"/" pyproject.toml
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --strip --out dist -i python${{ matrix.python-version }}
          sccache: "false"
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.name }}-${{ matrix.python-version }}
          path: dist
      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements.txt
      - name: Install Qemu
        uses: docker/setup-qemu-action@v3
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ci/Dockerfile.alpine
          platforms: linux/${{ matrix.platform.name }}
          push: false
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=${{ matrix.python-version }}
          tags: deebot_client:${{ matrix.platform.name }}-${{ matrix.python-version }}
      - name: Pytest in docker
        id: pytest
        run: |
          docker run --rm -v ${{ github.workspace }}:/github/workspace --platform linux/${{ matrix.platform.name }} deebot_client:${{ matrix.platform.name }}-${{ matrix.python-version }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
      - name: Upload test results to Codecov
        if: ${{ !cancelled() && steps.pytest.outcome == 'success' }}
        uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true

  benchmarks:
    runs-on: "ubuntu-latest"
    name: Run benchmarks
    needs:
      - info
      - build-test-native
    steps:
      - name: ‚§µÔ∏è Checkout repository
        uses: actions/checkout@v4
      - name: üèó Install uv
        uses: astral-sh/setup-uv@v5
      - name: üèó Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.info.outputs.default_python_version }}
      - name: Download requirements.txt
        uses: actions/download-artifact@v4
        with:
          name: requirements.txt
      - name: üèó Install the project
        run: |
          uv pip install -e . --system -r requirements.txt
      - name: Run benchmarks
        uses: CodSpeedHQ/action@main
        with:
          run: pytest tests/ --codspeed
          token: ${{ secrets.CODSPEED_TOKEN }}

  sdist:
    name: Create source distribution
    runs-on: ubuntu-latest
    steps:
      - name: ‚§µÔ∏è Check out code from GitHub
        uses: actions/checkout@v4.2.2
      - name: üèó Set up uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      - name: üèó Set package version
        if: ${{ github.event_name == 'release' }}
        run: |
          sed -i "s/^version = \".*\"/version = \"${{ github.event.release.tag_name }}\"/" pyproject.toml
      - name: üì¶ Build source package
        run: uv build --sdist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
